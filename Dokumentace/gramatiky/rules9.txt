char* rule[SYNTAXRULES][RULEITEMS] = {
    {"programs",                "program", "programs", ""},
    {"programs",                "EPS", ""},
    {"program",                 "tFunction", "tFuncName", "tLPar", "arguments", "tRPar", "tColon", "type", "tLCurl", "statements", "returnState", "tRCurl", ""},
    {"program",                 "statement", ""},
    {"returnState",             "tReturn", "returnValue", "tSemicolon", ""},
    {"returnState",             "EPS", ""},
    {"returnValue",             "expression", ""},
    {"returnValue",             "EPS", ""},
    {"arguments",               "type", "tIdentifier", "argumentVars", ""},
    {"arguments",               "EPS", ""},
    {"parameters",              "term", "parameters2", ""},
    {"parameters",              "EPS", ""},
    {"parameters2",             "tComma", "term", "parameters2", ""},
    {"parameters2",             "EPS", ""},
    {"statements",              "statement", "statements", ""},
    {"statements",              "EPS", ""},
    {"statement",               "tIf", "tLPar", "expression", "tRPar", "tLCurl", "statements", "tRCurl", "tElse", "tLCurl", "statements", "tRCurl", ""},
    {"statement",               "tWhile", "tLPar", "expression", "tRPar", "tLCurl", "statements", "tRCurl", ""},
    {"statement",               "tFuncName", "tLPar", "parameters", "tRPar", "tSemicolon", ""},
    {"statement",               "preExpression1", ""},
    {"statement",               "preExpression2", ""},
    {"preExpression1",          "tIdentifier", "nextTerminal", ""},
    {"nextTerminal",            "tAssign", "expression", "tSemicolon", ""},
    {"nextTerminal",            "expression2", "tSemicolon", ""},
    {"preExpression2",          "const", "expression2", "tSemicolon", ""},
    {"preExpression2",          "tLPar", "const", "expression2", "tRPar", "tSemicolon", ""},
    {"expression",              "tLPar", "expression", "tRPar", "expression2", ""},
    {"expression",              "term", "expression2", ""},
    {"expression2",             "tPlus", "expression", ""},
    {"expression2",             "tMinus", "expression", ""},
    {"expression2",             "tMul", "expression", ""},
    {"expression2",             "tDiv", "expression", ""},
    {"expression2",             "tConcat", "expression", ""},
    {"expression2",             "tLess", "expression", ""},
    {"expression2",             "tLessEq", "expression", ""},
    {"expression2",             "tMore", "expression", ""},
    {"expression2",             "tMoreEq", "expression", ""},
    {"expression2",             "tIdentical", "expression", ""},
    {"expression2",             "tNotIdentical", "expression", ""},
    {"expression2",             "EPS", ""},
    {"term",                    "const", ""},
    {"term",                    "variable", ""},
    {"argumentVars",            "tComma", "type", "tIdentifier", "argumentVars", ""},
    {"argumentVars",            "EPS", ""},
    {"variable",                "tIdentifier", ""},
    {"const",                   "tInt", ""},
    {"const",                   "tReal", ""},
    {"const",                   "tReal2", ""},
    {"const",                   "tInt2", ""},
    {"const",                   "tNull", ""},
    {"const",                   "tLiteral", ""},
    {"type",                    "tNullTypeInt", ""},
    {"type",                    "tNullTypeFloat", ""},
    {"type",                    "tNullTypeString", ""},
    {"type",                    "tTypeInt", ""},
    {"type",                    "tTypeFloat", ""},
    {"type",                    "tTypeString", ""},
    {"type",                    "tVoid", ""},
};


58